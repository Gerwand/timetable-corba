// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.3

#include <OB/CORBAServer.h>
#include <GeneticTT_skel.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030300L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:Genetic:1.0
//

//
// IDL:Genetic/GeneticTimeTable/updateParameters:1.0
//
void
POA_Genetic::GeneticTimeTable::_OB_op_updateParameters(OB::Upcall_ptr _ob_up)
{
    ::CORBA::Long _ob_a0;
    ::CORBA::Long _ob_a1;
    ::CORBA::Long _ob_a2;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    _ob_a0 = _ob_in -> read_long();
    _ob_a1 = _ob_in -> read_long();
    _ob_a2 = _ob_in -> read_long();
    _OB_postUnmarshal(_ob_up);
    updateParameters(_ob_a0, _ob_a1, _ob_a2);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Genetic/GeneticTimeTable/getRandomPopulation:1.0
//
void
POA_Genetic::GeneticTimeTable::_OB_op_getRandomPopulation(OB::Upcall_ptr _ob_up)
{
    ::CORBA::Long _ob_a0;
    ::CORBA::Float _ob_a1;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    _ob_a0 = _ob_in -> read_long();
    _OB_postUnmarshal(_ob_up);
    ::Genetic::IndividualSeq_var _ob_r = getRandomPopulation(_ob_a0, _ob_a1);
    _OB_postinvoke(_ob_up);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    ::CORBA::ULong _ob_len0 = _ob_r.in().length();
    _ob_out -> write_ulong(_ob_len0);
    ::Genetic::PeriodSeq const * _ob_buf0 = _ob_r.in().get_buffer();
    for(::CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::CORBA::ULong _ob_len1 = _ob_buf0[_ob_i0].length();
        _ob_out -> write_ulong(_ob_len1);
        ::Genetic::LongSeq const * _ob_buf1 = _ob_buf0[_ob_i0].get_buffer();
        for(::CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
        {
            ::CORBA::ULong _ob_len2 = _ob_buf1[_ob_i1].length();
            _ob_out -> write_ulong(_ob_len2);
            _ob_out -> write_long_array(_ob_buf1[_ob_i1].get_buffer(), _ob_len2);
        }
    }
    _ob_out -> write_float(_ob_a1);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Genetic/GeneticTimeTable/mate:1.0
//
void
POA_Genetic::GeneticTimeTable::_OB_op_mate(OB::Upcall_ptr _ob_up)
{
    ::CORBA::Long _ob_a0;
    ::CORBA::Float _ob_a1;
    ::CORBA::Long _ob_a2;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    _ob_a0 = _ob_in -> read_long();
    _OB_postUnmarshal(_ob_up);
    ::Genetic::IndividualSeq_var _ob_r = mate(_ob_a0, _ob_a1, _ob_a2);
    _OB_postinvoke(_ob_up);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    ::CORBA::ULong _ob_len0 = _ob_r.in().length();
    _ob_out -> write_ulong(_ob_len0);
    ::Genetic::PeriodSeq const * _ob_buf0 = _ob_r.in().get_buffer();
    for(::CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::CORBA::ULong _ob_len1 = _ob_buf0[_ob_i0].length();
        _ob_out -> write_ulong(_ob_len1);
        ::Genetic::LongSeq const * _ob_buf1 = _ob_buf0[_ob_i0].get_buffer();
        for(::CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
        {
            ::CORBA::ULong _ob_len2 = _ob_buf1[_ob_i1].length();
            _ob_out -> write_ulong(_ob_len2);
            _ob_out -> write_long_array(_ob_buf1[_ob_i1].get_buffer(), _ob_len2);
        }
    }
    _ob_out -> write_float(_ob_a1);
    _ob_out -> write_long(_ob_a2);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Genetic/GeneticTimeTable/tuples:1.0
//
void
POA_Genetic::GeneticTimeTable::_OB_get_tuples(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    ::Genetic::TupleSeq_var _ob_r = tuples();
    _OB_postinvoke(_ob_up);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    ::CORBA::ULong _ob_len0 = _ob_r.in().length();
    _ob_out -> write_ulong(_ob_len0);
    ::Genetic::Tuple const * _ob_buf0 = _ob_r.in().get_buffer();
    for(::CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
    _OB_postMarshal(_ob_up);
}

void
POA_Genetic::GeneticTimeTable::_OB_set_tuples(OB::Upcall_ptr _ob_up)
{
    ::Genetic::TupleSeq _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_a0.length(_ob_len0);
    ::Genetic::Tuple * _ob_buf0 = _ob_a0.get_buffer();
    for(::CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::Genetic::Tuple::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
    _OB_postUnmarshal(_ob_up);
    tuples(_ob_a0);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Genetic/GeneticTimeTable/population:1.0
//
void
POA_Genetic::GeneticTimeTable::_OB_get_population(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    ::Genetic::IndividualSeq_var _ob_r = population();
    _OB_postinvoke(_ob_up);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    ::CORBA::ULong _ob_len0 = _ob_r.in().length();
    _ob_out -> write_ulong(_ob_len0);
    ::Genetic::PeriodSeq const * _ob_buf0 = _ob_r.in().get_buffer();
    for(::CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::CORBA::ULong _ob_len1 = _ob_buf0[_ob_i0].length();
        _ob_out -> write_ulong(_ob_len1);
        ::Genetic::LongSeq const * _ob_buf1 = _ob_buf0[_ob_i0].get_buffer();
        for(::CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
        {
            ::CORBA::ULong _ob_len2 = _ob_buf1[_ob_i1].length();
            _ob_out -> write_ulong(_ob_len2);
            _ob_out -> write_long_array(_ob_buf1[_ob_i1].get_buffer(), _ob_len2);
        }
    }
    _OB_postMarshal(_ob_up);
}

void
POA_Genetic::GeneticTimeTable::_OB_set_population(OB::Upcall_ptr _ob_up)
{
    ::Genetic::IndividualSeq _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    ::CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_a0.length(_ob_len0);
    ::Genetic::PeriodSeq * _ob_buf0 = _ob_a0.get_buffer();
    for(::CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::CORBA::ULong _ob_len1 = _ob_in -> read_ulong();
        _ob_buf0[_ob_i0].length(_ob_len1);
        ::Genetic::LongSeq * _ob_buf1 = _ob_buf0[_ob_i0].get_buffer();
        for(::CORBA::ULong _ob_i1 = 0 ; _ob_i1 < _ob_len1 ; _ob_i1++)
        {
            ::CORBA::ULong _ob_len2 = _ob_in -> read_ulong();
            _ob_buf1[_ob_i1].length(_ob_len2);
            _ob_in -> read_long_array(_ob_buf1[_ob_i1].get_buffer(), _ob_len2);
        }
    }
    _OB_postUnmarshal(_ob_up);
    population(_ob_a0);
    _OB_postinvoke(_ob_up);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Genetic/GeneticTimeTable:1.0
//
::CORBA::Boolean
POA_Genetic::GeneticTimeTable::_is_a(const char* type)
    throw(::CORBA::SystemException)
{
    const char** _ob_ids = Genetic::GeneticTimeTable::_OB_staticIds();
    for(::CORBA::ULong _ob_i = 0; _ob_ids[_ob_i] != 0; ++_ob_i)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

::CORBA::RepositoryId
POA_Genetic::GeneticTimeTable::_primary_interface(const PortableServer::ObjectId&,
                                                  PortableServer::POA_ptr)
{
    return ::CORBA::string_dup(Genetic::GeneticTimeTable::_OB_staticIds()[0]);
}

Genetic::GeneticTimeTable_ptr
POA_Genetic::GeneticTimeTable::_this()
{
    ::CORBA::Object_var obj = _OB_createReference();
    Genetic::GeneticTimeTable_var result = Genetic::GeneticTimeTable::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_Genetic::GeneticTimeTable::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                                        const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_Genetic::GeneticTimeTable(poa, oid, this);
}

void
POA_Genetic::GeneticTimeTable::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "_get_population",
        "_get_tuples",
        "_set_population",
        "_set_tuples",
        "getRandomPopulation",
        "mate",
        "updateParameters"
    };
    static const ::CORBA::ULong _ob_numNames = 7;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // _get_population
        _OB_get_population(_ob_up);
        return;

    case 1: // _get_tuples
        _OB_get_tuples(_ob_up);
        return;

    case 2: // _set_population
        _OB_set_population(_ob_up);
        return;

    case 3: // _set_tuples
        _OB_set_tuples(_ob_up);
        return;

    case 4: // getRandomPopulation
        _OB_op_getRandomPopulation(_ob_up);
        return;

    case 5: // mate
        _OB_op_mate(_ob_up);
        return;

    case 6: // updateParameters
        _OB_op_updateParameters(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:Genetic/GeneticTimeTable:1.0
//
OBDirectStubImpl_Genetic::GeneticTimeTable::GeneticTimeTable(
    PortableServer::POA_ptr poa,
    const PortableServer::ObjectId& oid,
    PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:Genetic/GeneticTimeTable/updateParameters:1.0
//
void
OBDirectStubImpl_Genetic::GeneticTimeTable::updateParameters(::CORBA::Long _ob_a0,
                                                             ::CORBA::Long _ob_a1,
                                                             ::CORBA::Long _ob_a2)
{
    OB::InvocationHandler _ob_handler(this, "updateParameters");
    dynamic_cast<POA_Genetic::GeneticTimeTable*>(_ob_servant_) -> updateParameters(_ob_a0, _ob_a1, _ob_a2);
}

//
// IDL:Genetic/GeneticTimeTable/getRandomPopulation:1.0
//
::Genetic::IndividualSeq*
OBDirectStubImpl_Genetic::GeneticTimeTable::getRandomPopulation(::CORBA::Long _ob_a0,
                                                                ::CORBA::Float_out _ob_a1)
{
    OB::InvocationHandler _ob_handler(this, "getRandomPopulation");
    return dynamic_cast<POA_Genetic::GeneticTimeTable*>(_ob_servant_) -> getRandomPopulation(_ob_a0, _ob_a1);
}

//
// IDL:Genetic/GeneticTimeTable/mate:1.0
//
::Genetic::IndividualSeq*
OBDirectStubImpl_Genetic::GeneticTimeTable::mate(::CORBA::Long _ob_a0,
                                                 ::CORBA::Float_out _ob_a1,
                                                 ::CORBA::Long_out _ob_a2)
{
    OB::InvocationHandler _ob_handler(this, "mate");
    return dynamic_cast<POA_Genetic::GeneticTimeTable*>(_ob_servant_) -> mate(_ob_a0, _ob_a1, _ob_a2);
}

//
// IDL:Genetic/GeneticTimeTable/tuples:1.0
//
::Genetic::TupleSeq*
OBDirectStubImpl_Genetic::GeneticTimeTable::tuples()
{
    OB::InvocationHandler _ob_handler(this, "_get_tuples");
    return dynamic_cast<POA_Genetic::GeneticTimeTable*>(_ob_servant_) -> tuples();
}

void
OBDirectStubImpl_Genetic::GeneticTimeTable::tuples(const ::Genetic::TupleSeq& _ob_a)
{
    OB::InvocationHandler _ob_handler(this, "_set_tuples");
    dynamic_cast<POA_Genetic::GeneticTimeTable*>(_ob_servant_) -> tuples(_ob_a);
}

//
// IDL:Genetic/GeneticTimeTable/population:1.0
//
::Genetic::IndividualSeq*
OBDirectStubImpl_Genetic::GeneticTimeTable::population()
{
    OB::InvocationHandler _ob_handler(this, "_get_population");
    return dynamic_cast<POA_Genetic::GeneticTimeTable*>(_ob_servant_) -> population();
}

void
OBDirectStubImpl_Genetic::GeneticTimeTable::population(const ::Genetic::IndividualSeq& _ob_a)
{
    OB::InvocationHandler _ob_handler(this, "_set_population");
    dynamic_cast<POA_Genetic::GeneticTimeTable*>(_ob_servant_) -> population(_ob_a);
}

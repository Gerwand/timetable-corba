// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.3

#ifndef ___RandomInterface_skel_h__
#define ___RandomInterface_skel_h__

#include <RandomInterface.h>


#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030300L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:Genetic:1.0
//
namespace POA_Genetic
{

//
// IDL:Genetic/RandomProvider:1.0
//
class RandomProvider : virtual public PortableServer::ServantBase
{
    RandomProvider(const RandomProvider&);
    void operator=(const RandomProvider&);

protected:

    //
    // IDL:Genetic/RandomProvider/getRandomLong:1.0
    //
    void _OB_op_getRandomLong(OB::Upcall_ptr);

public:

    RandomProvider() { }

    virtual ::CORBA::Boolean _is_a(const char*)
        throw(::CORBA::SystemException);

    virtual ::CORBA::RepositoryId _primary_interface(
        const PortableServer::ObjectId&,
        PortableServer::POA_ptr);

    Genetic::RandomProvider_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(
        PortableServer::POA_ptr,
        const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:Genetic/RandomProvider/getRandomLong:1.0
    //
    virtual ::Genetic::RandomSeq* getRandomLong(::CORBA::Long num)
        throw(::CORBA::SystemException) = 0;
};

} // End of namespace POA_Genetic

//
// IDL:Genetic:1.0
//
namespace OBDirectStubImpl_Genetic
{

//
// IDL:Genetic/RandomProvider:1.0
//
class RandomProvider : virtual public OBStubImpl_Genetic::RandomProvider,
                       virtual public OB::DirectStubImpl
{
    RandomProvider(const RandomProvider&);
    void operator=(const RandomProvider&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    RandomProvider() { }

#endif

    RandomProvider(PortableServer::POA_ptr,
                   const PortableServer::ObjectId&,
                   PortableServer::ServantBase*);

    friend class POA_Genetic::RandomProvider;

public:

    //
    // IDL:Genetic/RandomProvider/getRandomLong:1.0
    //
    virtual ::Genetic::RandomSeq* getRandomLong(::CORBA::Long num);
};

} // End of namespace OBDirectStubImpl_Genetic

#endif
